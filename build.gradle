// Execute Tasks in SubModule: gradle MODUL:clean build
//buildscript {
//    repositories {
//        mavenLocal()
//        mavenCentral()
//        gradlePluginPortal()
//    }
//
//    dependencies {
//        classpath("de.freese.gradle:gradle-plugins:$version_myConventionPlugin")
//        classpath("io.openliberty.tools:liberty-gradle-plugin:$version_libertyGradlePlugin")
//        classpath("io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement")
//    }
//}

plugins {
    id("de.freese.gradle.java.conventions") version("$version_myJavaConventionPlugin") apply(false)
    id("io.spring.dependency-management") version("$version_springDependencyManagementPlugin") apply(false)

    // build/generateOpenApiSpec
    id("io.smallrye.openapi") version("${version_ioSmallryeOpenapiGradlePlugin}") apply(false)

    // https://github.com/OpenAPITools/openapi-generator/
    id("org.openapi.generator") version("${version_openapGeneratorGradlePlugin}") apply(false)
}

allprojects {
    apply plugin: "base"

    clean {
        doFirst {
            def dirs = ["bin", "logs", "out", "target"]

            dirs.each(dir -> {
                Directory directory = layout.projectDirectory.dir(dir)

                if (directory.getAsFile().exists()) {
                    // println("delete: " + directory)
                    logger.lifecycle("delete: {}", directory)
                    // delete(fileTree(directory).include("**/*"))
                    delete(directory)
                }
            })
        }
    }

    ant.lifecycleLogLevel = "INFO"

    // repositories {
    //
    // }
}

subprojects {
    apply plugin: "de.freese.gradle.java.conventions"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("com.amazonaws:aws-java-sdk-bom:$version_amazonAws")
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("com.esotericsoftware:kryo:$version_kryo")
            dependency("io.openliberty.api:io.openliberty.transaction:$version_openlibertyApi")
            dependency("jakarta.platform:jakarta.jakartaee-api:$version_jakartaApi")
            dependency("org.eclipse.microprofile.openapi:microprofile-openapi-api:${version_microprofileOpenapiApi}")
            dependency("org.glassfish.jersey.connectors:jersey-jnh-connector:" + dependencyManagement.importedProperties["jersey.version"])
            dependency("org.primefaces:primefaces:$version_primefaces")
            dependency("org.primefaces:primefaces-themes:$version_primefacesThemes")
        }
    }

    pluginManager.withPlugin("java") {
        dependencies {
            //implementation(platform("de.freese:maven-bom:$version_mavenBom"))

            testImplementation("org.junit.jupiter:junit-jupiter")
            testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        }
    }
}

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}
