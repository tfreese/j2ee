description = "spring-embeddedDB"
//println "Started: ${description}"
//println "Started: ${rootProject.name}"

apply plugin: "java"
apply plugin: "application"
apply plugin: "maven"
//apply plugin: "maven-publish"
apply plugin: "signing"

defaultTasks "clean"

mainClassName = "de.freese.jdbc.Main" //gradle run
group = "de.freese.spring"
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = "0.0.1-SNAPSHOT"

dependencies {
    runtime libs.hsqldb
    compile libs.jcl_over_slf4j
	compile libs.querydsl_sql_codegen
    compile libs.slf4j_simple
    compile libs.spring_context
    compile libs.spring_jdbc

    testCompile libs.junit
}

jar {
	manifest {
		attributes "Implementation-Title": project.name,
			"Implementation-Version": version,
			"Built-By": vendor,
			"Built-JDK": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
			"Built-Date": new Date(),
			"Main-Class": mainClassName
	}
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task testJar(type: Jar) {
	classifier = 'test'
	from sourceSets.test.output
}

task testSourcesJar(type: Jar) {
	classifier = 'test-sources'
	from sourceSets.test.allSource
}

artifacts {
	archives sourcesJar
	archives testJar
	archives testSourcesJar
	archives javadocJar
}

task myzip(type: Zip) {
	baseName = "customName"
	destinationDir = project.buildDir
	classifier = "docs"
	description = "Test-Zip"
						   
	from("backup") {
			into "backup"
	}
	into(".settings") {
			from ".settings"
	}
}

signing {
	sign configurations.archives
	//sign myzip
}

uploadArchives {
	repositories {
		flatDir {
			dirs "${project.buildDir}/my-repository/flat"
		}
		mavenDeployer {
			repository(url: "file://" + mavenlocalrepo)
			//repository(url: "file://" + file("${project.buildDir}/my-repository/maven"))
			
			uniqueVersion = false
			
			pom.project {
				//groupId "my.test"
				//artifactId "quickstart"
				packaging "jar"
				name rootProject.name
				description "${description}"
			}

			//mess with the generated pom to set the 'packaging' tag
			pom.withXml { XmlProvider xmlProvider ->
				def xml = xmlProvider.asString()
				def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

				pomXml.version[0] + { packaging('jar') }

				def newXml = new StringWriter()
				def printer = new XmlNodePrinter(new PrintWriter(newXml))
				printer.preserveWhitespace = true
				printer.print(pomXml)
				xml.setLength(0)
				xml.append(newXml.toString())
			}
		}
	}
}

// gradle publishToMavenLocal
// Nur f√ºr Plugin maven-publish
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from components.java
//        }
//    }
//}


