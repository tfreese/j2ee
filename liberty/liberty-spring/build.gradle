import java.awt.*

plugins {
    id "war"
    id "io.openliberty.tools.gradle.Liberty"
}

description = "Demo f端r Spring-Integration"
// https://openliberty.io/guides/gradle-intro.html#getting-started

ext {
    liberty.server.var."default.http.port" = "9081"
    liberty.server.var."default.https.port" = "9444"
    liberty.server.var."app.context.root" = project.name
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }

    // providedCompile
//    compileOnly("jakarta.platform:jakarta.jakartaee-web-api")
    compileOnly("jakarta.platform:jakarta.jakartaee-api")
    compileOnly("org.hsqldb:hsqldb")
//    compileOnly("org.springframework.boot:spring-boot-starter-tomcat")
}

test {
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
//        exceptionFormat = TestExceptionFormat.FULL
    }

    systemProperty "http.port", liberty.server.var."default.http.port"
    systemProperty "context.root", liberty.server.var."app.context.root"
}

tasks.register("openBrowser") {
    group = "My Tasks"
    description = "Open browser to the running application"

    doLast {
        String port = liberty.server.var."default.http.port"
        String context = liberty.server.var."app.context.root"
        String URL = "http://localhost:" + port + "/" + context + "/" + "servlet"

        Desktop.getDesktop().browse(URL.toURI())
        Desktop.getDesktop().browse(file("$buildDir/reports/tests/test/index.html").toURI())
    }
}

//test.dependsOn "libertyStart"
//test.finalizedBy(openBrowser)
//clean.dependsOn "libertyStop"

//F端r Platzhalter in application.properties/application.yml
ext.artifactId = project.name

processResources {
    // filesMatching("**/*.properties")
    filesMatching("application.properties") {
        filteringCharset = "UTF-8"

        // Bei Problemen m端ssen die Platzhalter escaped werden: \${...}
        expand(project.properties)

        //expand ("@project.description@": project.description,
        //		"@project.artifactId@": project.name,
        //		"@project.version@": project.version
        //)

        //filter{ it.replaceAll("@project.description@", project.description)}
        //filter{ it.replaceAll("@project.artifactId@", project.name)}
        //filter{ it.replaceAll("@project.version@", project.version)}
    }

    filesMatching("application.yml") {
        filteringCharset = "UTF-8"
        // Bei Problemen m端ssen die Platzhalter escaped werden: \${...}
        expand(project.properties)
    }
}
