plugins {
    id("war")
    id("io.openliberty.tools.gradle.Liberty") version("$version_libertyGradlePlugin")
}

description = "Demo for Spring-Integration"
// https://openliberty.io/guides/gradle-intro.html#getting-started

ext {
    liberty.server.var."http.port" = "9081"
    liberty.server.var."https.port" = "9444"
    liberty.server.var."context.root" = project.name
}

configurations {
    jdbcLib {
        extendsFrom(runtimeOnly)
    }
}

dependencies {
    libertyRuntime("io.openliberty:openliberty-kernel:$version_openliberty")
    // libertyRuntime("io.openliberty:openliberty-runtime:%version_openliberty")

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
    }

    // implementation("com.h2database:h2")
    jdbcLib("com.h2database:h2")

    // providedCompile
    compileOnly("jakarta.platform:jakarta.jakartaee-api")
//    compileOnly("org.springframework.boot:spring-boot-starter-tomcat")
}

tasks.register("copyJDBC", Copy) {
    group = "MyTasks"

    from(configurations.jdbcLib)
    into(layout.buildDirectory.get().dir("wlp").dir("usr").dir("servers").dir(project.name).dir("jdbc"))
    include("*.jar")
}
deploy.dependsOn("copyJDBC")

tasks.named("test") {
    enabled = true

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
//        exceptionFormat = TestExceptionFormat.FULL
    }

    systemProperty("http.port", liberty.server.var."http.port")
    systemProperty("context.root", liberty.server.var."context.root")
}

tasks.register("openBrowser") {
    group = "MyTasks"
    description = "Open browser to the running application"

    doLast {
        String port = liberty.server.var."http.port"
        String context = liberty.server.var."context.root"
        String url = "http://localhost:" + port + "/" + context + "/sysdate"

        java.awt.Desktop.desktop.browse url.toURI()
        // java.awt.Desktop.desktop.browse file("${layout.buildDirectory.get()}/reports/tests/test/index.html").toURI()
    }
}

tasks.register("sleep") {
    group = "MyTasks"
    description = "Sleeps some seconds"

    doLast {
        logger.lifecycle("sleeping: {} seconds", 5)
        sleep(5000)
    }
}

test.dependsOn("libertyStart")
test.finalizedBy("libertyStop")
// test.finalizedBy("sleep")
// test.finalizedBy("openBrowser")
clean.dependsOn("libertyStop")

liberty {
    // install {
    //     baseDir = "/tmp"
    // }

    server {
        //baseDir = layout.buildDirectory.dir("ibm").get()
        name = project.name

        stripVersion = true

        // Clean logs, workarea, apps, dropins on server startup
        clean = true

        // Wait n seconds to verify application start.
        // verifyAppStartTimeout = 30

        // configDirectory = file("src/resources/config")
        // bootstrapProperties = ["default.http.port":"9080", "default.https.port":"9443"]
        // jvmOptions = ["-Xms128m", "-Xmx512m"]
        // serverXmlFile = file("src/resources/config/server-test1.xml")
        // bootstrapPropertiesFile = file("src/resources/config/bootstrap.test.properties")
        // jvmOptionsFile = file("src/resources/config/jvm.test.options")
        // serverEnvFile = file("src/resources/config/server.test.env")
    }
}

//Für Platzhalter in application.properties/application.yml
ext.artifactId = project.name

processResources {
    def map = [
            "project_description": project.description,
            "project_artifactId" : project.name,
            "project_version"    : project.version
    ]

    // filesMatching("**/*.properties")
    filesMatching(["application.properties", "application.yml"]) {
        filteringCharset = "UTF-8"

        // Bei Problemen müssen die Platzhalter escaped werden: \${...}
        // expand(project.properties)
        expand(map)

        // expand("project_description": project.description,
        //         "project_artifactId": project.name,
        //         "project_version": project.version
        // )

        //filter{ it.replaceAll("@project.description@", project.description)}
        //filter{ it.replaceAll("@project.artifactId@", project.name)}
        //filter{ it.replaceAll("@project.version@", project.version)}
    }
}
