plugins {
    id("war")
    id("io.openliberty.tools.gradle.Liberty") version("$version_libertyGradlePlugin")

    // build/generateOpenApiSpec
    id("io.smallrye.openapi")
    id("org.openapi.generator")
}

description = "Demo for REST-Services"
// https://openliberty.io/guides/gradle-intro.html#getting-started

ext {
    liberty.server.var."http.port" = "9080"
    liberty.server.var."https.port" = "9443"
    liberty.server.var."context.root" = project.name
}

def destDir = layout.buildDirectory.get().dir("generated-sources")

sourceSets {
    main {
        java {
            srcDir(destDir.dir("src").dir("main").dir("java"))
        }
    }
}

dependencies {
    libertyRuntime("io.openliberty:openliberty-kernel:$version_openliberty")

    implementation("com.esotericsoftware:kryo")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    //implementation("com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider")
    implementation("com.github.ben-manes.caffeine:caffeine")
    implementation("org.slf4j:slf4j-api")

    compileOnly("jakarta.platform:jakarta.jakartaee-api")
    compileOnly("org.eclipse.microprofile.openapi:microprofile-openapi-api")

    runtimeOnly("org.slf4j:slf4j-simple")

    testImplementation("jakarta.platform:jakarta.jakartaee-api")
    // // testImplementation("org.eclipse.microprofile:microprofile:6.1")
    // testImplementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider")
    // testImplementation("org.glassfish.jersey.core:jersey-client")
    // testImplementation("org.glassfish.jersey.media:jersey-media-json-jackson")
}

test {
    enabled = true

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
//        exceptionFormat = TestExceptionFormat.FULL
    }

    systemProperty("http.port", liberty.server.var."http.port")
    systemProperty("context.root", liberty.server.var."context.root")
}

tasks.register("openBrowser") {
    group = "MyTasks"
    description = "Open browser to the running application"

    doLast {
        String port = liberty.server.var."http.port"
        String context = liberty.server.var."context.root"
        String url = "http://localhost:" + port + "/" + context + "/my-liberty/service/properties"

        java.awt.Desktop.desktop.browse url.toURI()
        // java.awt.Desktop.desktop.browse file("${layout.buildDirectory.get()}/reports/tests/test/index.html").toURI()
    }
}

test.dependsOn("libertyStart")
test.finalizedBy("libertyStop")
// test.finalizedBy("openBrowser")
clean.dependsOn("libertyStop")

liberty {
    server {
        //baseDir = layout.buildDirectory.dir("ibm").get()
        name = project.name

        stripVersion = true

        // Clean logs, workarea, apps, dropins on server startup
        clean = true

        // Wait n seconds to verify application start.
        // verifyAppStartTimeout = 30
    }
}

war {
    dependsOn("generateOpenApiSpec")

    // Skinny-War
    rootSpec.exclude("**/*.jar", "**/*.rar")

    // OpenApi Dateien sollten automatisch im WAR/META-INF landen.
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    metaInf {
        from(layout.buildDirectory.get().dir("generated").dir("openapi"))
    }
}

// build/generated/openapi
smallryeOpenApi {
    infoTitle = "My API's"
    infoVersion = project.version
    encoding = "UTF-8"
    scanPackages = ["de.freese.liberty.rest"]
    // scanClasses = ["CLASS_1", "CLASS_2"]
    servers = ["http://localhost:9080/liberty-rest"]
}
processResources.finalizedBy("generateOpenApiSpec")

// https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
// https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md
// http://localhost:9080/liberty-rest/openapi/ui/
openApiGenerate {
    generatorName = "java"
    globalProperties = [
            // force only the models
            apis    : "false",
            invokers: "false",
            models  : ""
    ]
    configOptions = [
            containerDefaultToNull       : "true",
            dateLibrary                  : "java8-localdatetime",
            // Eigentlich ist es hier 'microprofile', jedoch wird dann kein Jackson, sondern JsonB generiert.
            // Jsonb haben wir aber nicht im Server, weshalb die Annotation nicht erkannt werden und die Serialisierung fehlschl√§gt.
            // Da wir nur das Model brauchen, nehmen wir einfach 'resteasy' als Workaround.
            library                      : "resteasy",
            microprofileRestClientVersion: "3.0",
            useOneOfInterfaces           : "true",
            serialisationLibrary         : "jackson",
            useJakartaEe                 : "true"
    ]
    inputSpec = layout.buildDirectory.get().dir("generated").dir("openapi").file("openapi.json").toString()
    //inputSpec = "$rootDir/libs/openapi/openapi-pps/schema/pps-openapi.json"
    //inputSpec = "$projectDir/schema/pps-openapi.json"
    //inputSpec = "schema/pps-openapi.json"
    outputDir = destDir.toString()
    apiPackage = "de.api"
    modelPackage = "de.model"
    generateModelTests = false
    generateModelDocumentation = false
    generateApiTests = false
    generateApiDocumentation = false
    logToStderr = true
}
compileJava.dependsOn("openApiGenerate")

// tasks.register("prepareGeneratedCode") {
//     group = "star"
//     description = "Prepare the generated Code"
//
//     dependsOn("openApiGenerate")
//
//     doLast {
//         // Das System hat die Typ-Information manuell in die Objekte eingefuegt.
//         // So passt das Schema nicht immer mit den Objekten zusammen.
//         // Hiermit weisen wir Jackson an die Typ-Information in DsObject.type nur zu setzen, wenn wir es explizit setzen.
//         ant.replaceregexp(
//                 match: "@JsonTypeInfo\\(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"\", visible = true\\)\n",
//                 replace: "@JsonTypeInfo\\(use = JsonTypeInfo.Id.NONE, include = JsonTypeInfo.As.PROPERTY, property = \"\", visible = true\\)\n") {
//             fileset(dir: destDir, includes: "**/DsObject.java")
//         }
//     }
// }
