plugins {
    id "war"
    id "io.openliberty.tools.gradle.Liberty" version "$version_libertyGradlePlugin"
}

description = "Demo for REST-Services"
// https://openliberty.io/guides/gradle-intro.html#getting-started

ext {
    liberty.server.var."http.port" = "9080"
    liberty.server.var."https.port" = "9443"
    liberty.server.var."context.root" = project.name
}

dependencies {
    libertyRuntime("io.openliberty:openliberty-kernel:$version_openliberty")

    implementation("com.esotericsoftware:kryo")
    implementation("org.slf4j:slf4j-api")

    compileOnly("jakarta.platform:jakarta.jakartaee-api")

    runtimeOnly("org.slf4j:slf4j-simple")

    // // testImplementation("org.eclipse.microprofile:microprofile:6.1")
    // testImplementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider")
    // testImplementation("org.glassfish.jersey.core:jersey-client")
    // testImplementation("org.glassfish.jersey.media:jersey-media-json-jackson")
}

test {
    enabled = true

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
//        exceptionFormat = TestExceptionFormat.FULL
    }

    systemProperty "http.port", liberty.server.var."http.port"
    systemProperty "context.root", liberty.server.var."context.root"
}

tasks.register("openBrowser") {
    group = "MyTasks"
    description = "Open browser to the running application"

    doLast {
        String port = liberty.server.var."http.port"
        String context = liberty.server.var."context.root"
        String url = "http://localhost:" + port + "/" + context + "/my-liberty/service/properties"

        java.awt.Desktop.desktop.browse url.toURI()
        // java.awt.Desktop.desktop.browse file("${layout.buildDirectory.get()}/reports/tests/test/index.html").toURI()
    }
}

test.dependsOn("libertyStart")
test.finalizedBy("libertyStop")
// test.finalizedBy("openBrowser")
clean.dependsOn("libertyStop")

liberty {
    server {
        //baseDir = layout.buildDirectory.dir("ibm").get()
        name = project.name

        stripVersion = true

        // Clean logs, workarea, apps, dropins on server startup
        clean = true

        // Wait n seconds to verify application start.
        // verifyAppStartTimeout = 30
    }
}
