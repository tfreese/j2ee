plugins {
    id "war"
    id "io.openliberty.tools.gradle.Liberty" version "$version_libertyGradlePlugin"
}

description = "Demo for Liberty-Configuration"

Properties properties = new Properties()
file("config/bootstrap.properties").withInputStream { properties.load(it) }

dependencies {
    libertyRuntime("io.openliberty:openliberty-kernel:$version_openliberty")
    // libertyRuntime("io.openliberty:openliberty-runtime:$version_openliberty")

    implementation("org.hibernate.orm:hibernate-core") {
        exclude group: "jakarta.activation", module: "*"
        exclude group: "jakarta.inject", module: "*"
        exclude group: "jakarta.persistence", module: "*"
        exclude group: "jakarta.transaction", module: "*"
        exclude group: "jakarta.xml.bind", module: "*"
    }
    implementation("org.slf4j:slf4j-api")

    // providedCompile
    compileOnly("io.openliberty.api:io.openliberty.transaction")
    compileOnly("jakarta.platform:jakarta.jakartaee-api")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.hsqldb:hsqldb")
}

war {
    // Skinny-War
    rootSpec.exclude("**/*.jar", "**/*.rar")
}

// test.dependsOn("libertyStart")
test.finalizedBy("libertyStop")
clean.dependsOn("libertyStop")

// ant.lifecycleLogLevel = "INFO"
//
// // Register ANT-Tasks as Gradle-Tasks with Prefix "ant-" in Group "other".
// ant.importBuild("ant_deploy.xml") { antTargetName -> "ant-" + antTargetName }
// ant.properties["version"] = project.version
//
// // Set group property for all Ant tasks.
// tasks.matching { task -> task.name.startsWith("ant-") }.configureEach { group = "Ant" }
//
// clean.finalizedBy("ant-clean")

tasks.register("deployApp") {
    group = "MyTasks"
    description = "Deploy Application"

    dependsOn("build")
    dependsOn("libertyCreate")

    doLast {
        var serverHome = properties.getProperty("server_home")

        delete serverHome + "/appl_data"
        delete serverHome + "/appl_logs"
        delete serverHome + "/logs"
        delete serverHome + "/tranlog"
        delete serverHome + "/workarea"
        delete serverHome + "/mqjms.log.0"

        var warFolder = serverHome + "/appl/" + properties.getProperty("deploy_folder")
        delete warFolder
        copy {
            from project.tasks.war
            into warFolder
            rename { String fileName ->
                fileName.replace("-${project.version}", "")
            }
        }

        var libFolder = serverHome + "/appl/appl_libs"
        delete libFolder
        copy {
            from configurations.runtimeClasspath - configurations.providedCompile {
                include "*.jar"
                include "*.rar"
                //    exclude "ohj*"
            }

            into libFolder
        }
    }
}

liberty {
    install {
        baseDir = "/tmp"
    }

    server {
        name = project.name

        stripVersion = true

        // Clean logs, workarea, apps, dropins on server startup
        clean = true

        // Wait n seconds to verify application start.
        // verifyAppStartTimeout = 30

        configDirectory = file("config")
    }
}
