plugins {
    id "war"
    id "io.openliberty.tools.gradle.Liberty" version "$version_libertyGradlePlugin"
}

description = "Demo for Liberty-Configuration"

dependencies {
    libertyRuntime("io.openliberty:openliberty-kernel:$version_openliberty")

    implementation("org.hibernate.orm:hibernate-core") {
        exclude group: "jakarta.activation", module: "*"
        exclude group: "jakarta.inject", module: "*"
        exclude group: "jakarta.persistence", module: "*"
        exclude group: "jakarta.transaction", module: "*"
        exclude group: "jakarta.xml.bind", module: "*"
    }
    implementation("org.slf4j:slf4j-api")

    // providedCompile
    compileOnly("io.openliberty.api:io.openliberty.transaction")
    compileOnly("jakarta.platform:jakarta.jakartaee-api")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.hsqldb:hsqldb")
}

war {
    // Skinny-War
    rootSpec.exclude("**/*.jar", "**/*.rar")
}

// test.dependsOn("libertyStart")
test.finalizedBy("libertyStop")
clean.dependsOn("libertyStop")

ant.lifecycleLogLevel = "INFO"

// Register ANT-Tasks as Gradle-Tasks with Prefix "ant-" in Group "other".
ant.importBuild("ant_build.xml") { antTargetName -> "ant-" + antTargetName }
ant.properties["version"] = project.version

// Set group property for all Ant tasks.
tasks.matching { task -> task.name.startsWith("ant-") }.configureEach { group = "Ant" }

clean.finalizedBy("ant-clean")

tasks.register("copyDependencies") {
    group = "MyTasks"
    description "Copy Dependencies to folder"

    doLast {
        def libFolder = layout.buildDirectory.dir("dependencies")

        println("copy Dependencies to: " + libFolder.get())

        delete libFolder

        copy {
            from configurations.runtimeClasspath - configurations.providedCompile {
                include "*.jar"
                include "*.rar"
                //    exclude "ohj*"
            }

            into libFolder
        }
    }
}

tasks.register("deployApp") {
    group = "MyTasks"
    description "Deploy Application"

    dependsOn("build")
    dependsOn("libertyCreate")
    dependsOn("copyDependencies")
    dependsOn("ant-deploy")

    doLast {
        // Empty
    }
}

//build.finalizedBy("copyDependencies", "ant-deploy")

liberty {
    install {
        baseDir = "/tmp"
    }

    server {
        name = project.name

        stripVersion = true

        // Clean logs, workarea, apps, dropins on server startup
        clean = true

        // Wait n seconds to verify application start.
        // verifyAppStartTimeout = 30

        configDirectory = file("config")
    }
}
